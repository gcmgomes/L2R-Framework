#ifndef _L2RF_BAYES_BRANCH_AND_BOUND_HEURISTIC_GRASP_H_
#define _L2RF_BAYES_BRANCH_AND_BOUND_HEURISTIC_GRASP_H_

#include <vector>

#include "../graph.h"
#include "../inverted_index.h"
#include "../variable.h"

namespace bayes {
namespace branch_and_bound {
namespace heuristic {

class Grasp {
 public:
  Grasp(const std::vector<Variable> &variables, const InvertedIndex *index);

  // Runs Grasp, to get the results you can either call GetOne or GetAll,
  //  in order to get one or all solutions generated.
  // Receives the maximum number of parents allowed for each variable,
  // and the number of runs executed.
  void run(int maxParents, int maxRuns);

  // Returns the best graph generated by the last run of grasp.
  Graph getBest();

  // Returns all solutions generated by the last run of grasp.
  std::vector<Graph> getAll();

 private:
  // Method that runs one iteration of the heuristic.
  void runRound(int maxParents);

  std::vector<Variable> variables_;

  // The best graph found by Run.
  Graph best_graph_;

  const InvertedIndex *index_;

  std::vector<Graph> solutions_;
};

}  // namespace heuristic
}  // namespace branch_and_bound
}  // namespace bayes

#endif  //_L2RF_BAYES_BRANCH_AND_BOUND_HEURISTIC_GRASP_H_
